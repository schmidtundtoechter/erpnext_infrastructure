services:
  frontend:
    networks:
      - traefik
    environment:
      - FRAPPE_HOST_NAME=https://${SCENARIO_TRAEFIK_URL}
      - FRAPPE_WEBSERVER_ROOT=${SCENARIO_TRAEFIK_ROUTE}
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik"
      # Router for route
      - "traefik.http.routers.${SCENARIO_NAME}.rule=Host(`${SCENARIO_TRAEFIK_URL}`) && PathPrefix(`${SCENARIO_TRAEFIK_ROUTE}`)"
      - "traefik.http.routers.${SCENARIO_NAME}.entrypoints=websecure"
      - "traefik.http.routers.${SCENARIO_NAME}.tls.certresolver=letsencrypt"
      # Strip route from the path for ${SCENARIO_NAME}
      - "traefik.http.middlewares.${SCENARIO_NAME}-headers.headers.customrequestheaders.Host=${SCENARIO_TRAEFIK_URL}"
      - "traefik.http.middlewares.${SCENARIO_NAME}-headers.headers.customrequestheaders.X-Forwarded-Prefix=${SCENARIO_TRAEFIK_ROUTE}"
      - "traefik.http.middlewares.${SCENARIO_NAME}-stripprefix.stripprefix.prefixes=${SCENARIO_TRAEFIK_ROUTE}"
      - "traefik.http.middlewares.${SCENARIO_NAME}-stripprefix.stripprefix.forceSlash=false"
      - "traefik.http.routers.${SCENARIO_NAME}.middlewares=${SCENARIO_NAME}-stripprefix,${SCENARIO_NAME}-headers"
      - "traefik.http.services.${SCENARIO_NAME}.loadbalancer.server.port=8080"
  backend:
    networks:
      - traefik

  configurator:
    networks:
      - traefik

  create-site:
    networks:
      - traefik

  db:
    networks:
      - traefik

  queue-long:
    networks:
      - traefik

  queue-short:
    networks:
      - traefik

  redis-queue:
    networks:
      - traefik

  redis-cache:
    networks:
      - traefik

  scheduler:
    networks:
      - traefik

  websocket:
    networks:
      - traefik

networks:
  traefik:
    external: true
